{
  "version": 3,
  "sources": ["../src/slots-light-vs-shadow.js"],
  "sourcesContent": ["/* tests are using createTestTree(node) to\n * append the node clone with\n * initiated shadowDom on template parent ( id=host )\n */\nimport { CssChain as $ } from \"./CssChain.js\";\n\n// from https://github.com/chromium/chromium/edit/main/third_party/blink/web_tests/external/wpt/shadow-dom/resources/shadow-dom.js\n// changes:\n//      * added walkLightDom() code to test $.template()\n//      * createTestTree adds the cloned transformed node to parent\n\nexport function createTestTree( node )\n{\n\n    let ids = {light:{},native:{}};\n\n    function attachShadowFromTemplate( template )\n    {\n        let parent = template.parentNode;\n        parent.removeChild( template );\n        let shadowRoot;\n        if( template.getAttribute( 'data-slot-assignment' ) === 'manual' )\n        {   /* c8 ignore next 5 */\n            shadowRoot =\n                parent.attachShadow( {\n                    mode: template.getAttribute( 'data-mode' ),\n                    slotAssignment: 'manual'\n                } );\n        }else\n        {\n            shadowRoot = parent.attachShadow(\n                { mode: template.getAttribute( 'data-mode' ) } );\n        }\n        let id = template.id;\n        /* c8 ignore next 5 */\n        if( id )\n        {\n            shadowRoot.id = id;\n            ids[ id ] = shadowRoot;\n        }\n        shadowRoot.appendChild( document.importNode( template.content, true ) );\n        return shadowRoot;\n    }\n\n    function walkShadowDom( root )\n    {   /* c8 ignore next 4 */\n        if( root.id )\n        {\n            ids[ root.id ] = root;\n        }\n        for( let e of Array.from( root.querySelectorAll( '[id]' ) ) )\n        {\n            ids[ e.id ] = e;\n        }\n        for( let e of Array.from( root.querySelectorAll( 'template' ) ) )\n        {\n            walkShadowDom( attachShadowFromTemplate( e ) );\n        }\n    }\n\n    function walkLightDom( root ) // using CssChain\n    {   if( root.id )\n            ids.light[ root.id ] = root;\n\n        $( '[id]',root ).map( e => ids.light[ e.id ] = e );\n\n        $( 'template', root )\n            .map( t =>\n            {   const p = t.parentNode;\n                p.removeChild(t);\n                const $rendered = $(p).template(t);\n                $rendered.children.map( walkLightDom );\n            });\n    }\n\n    const cloneAppend = (n,classname) =>\n    {   let x = node.cloneNode( true );\n        x.id=classname;\n        x.classList.add(classname);\n\n        if( classname==='light')\n            ids.light[node.id]=x;\n        else\n            ids[node.id]=x;\n        n.parentNode.appendChild(x);\n        return x\n    };\n\n    walkLightDom( cloneAppend( node ,'light'  ) );\n    walkShadowDom( cloneAppend( node,'shadow' ) );\n\n    return ids;\n}\n\n// https://github.com/chromium/chromium/blob/main/third_party/blink/web_tests/external/wpt/shadow-dom/resources/shadow-dom.js#L1\nexport function removeWhiteSpaceOnlyTextNodes(node)\n{\n    for (var i = 0; i < node.childNodes.length; i++) {\n        var child = node.childNodes[i];\n        if (child.nodeType === Node.TEXT_NODE && child.nodeValue.trim().length == 0) {\n            node.removeChild(child);\n            i--;\n        } else if (child.nodeType === Node.ELEMENT_NODE || child.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            removeWhiteSpaceOnlyTextNodes(child);\n        }\n    }\n    if (node.shadowRoot) {\n        removeWhiteSpaceOnlyTextNodes(node.shadowRoot);\n    }\n}\n"],
  "mappings": "aAIA,OAAS,YAAYA,MAAS,gBAOvB,gBAAS,eAAgBC,EAChC,CAEI,IAAIC,EAAM,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC,EAE7B,SAASC,EAA0BC,EACnC,CACI,IAAIC,EAASD,EAAS,WACtBC,EAAO,YAAaD,CAAS,EAC7B,IAAIE,EACAF,EAAS,aAAc,sBAAuB,IAAM,SAEpDE,EACID,EAAO,aAAc,CACjB,KAAMD,EAAS,aAAc,WAAY,EACzC,eAAgB,QACpB,CAAE,EAGNE,EAAaD,EAAO,aAChB,CAAE,KAAMD,EAAS,aAAc,WAAY,CAAE,CAAE,EAEvD,IAAIG,EAAKH,EAAS,GAElB,OAAIG,IAEAD,EAAW,GAAKC,EAChBL,EAAKK,CAAG,EAAID,GAEhBA,EAAW,YAAa,SAAS,WAAYF,EAAS,QAAS,EAAK,CAAE,EAC/DE,CACX,CAEA,SAASE,EAAeC,EACxB,CACQA,EAAK,KAELP,EAAKO,EAAK,EAAG,EAAIA,GAErB,QAASC,KAAK,MAAM,KAAMD,EAAK,iBAAkB,MAAO,CAAE,EAEtDP,EAAKQ,EAAE,EAAG,EAAIA,EAElB,QAASA,KAAK,MAAM,KAAMD,EAAK,iBAAkB,UAAW,CAAE,EAE1DD,EAAeL,EAA0BO,CAAE,CAAE,CAErD,CAEA,SAASC,EAAcF,EACvB,CAAQA,EAAK,KACLP,EAAI,MAAOO,EAAK,EAAG,EAAIA,GAE3BT,EAAG,OAAOS,CAAK,EAAE,IAAKC,GAAKR,EAAI,MAAOQ,EAAE,EAAG,EAAIA,CAAE,EAEjDV,EAAG,WAAYS,CAAK,EACf,IAAK,GACN,CAAI,MAAMG,EAAI,EAAE,WACZA,EAAE,YAAY,CAAC,EACGZ,EAAEY,CAAC,EAAE,SAAS,CAAC,EACvB,SAAS,IAAKD,CAAa,CACzC,CAAC,CACT,CAEA,MAAME,EAAc,CAACC,EAAEC,IACvB,CAAI,IAAIC,EAAIf,EAAK,UAAW,EAAK,EAC7B,OAAAe,EAAE,GAAGD,EACLC,EAAE,UAAU,IAAID,CAAS,EAErBA,IAAY,QACZb,EAAI,MAAMD,EAAK,EAAE,EAAEe,EAEnBd,EAAID,EAAK,EAAE,EAAEe,EACjBF,EAAE,WAAW,YAAYE,CAAC,EACnBA,CACX,EAEA,OAAAL,EAAcE,EAAaZ,EAAM,OAAS,CAAE,EAC5CO,EAAeK,EAAaZ,EAAK,QAAS,CAAE,EAErCC,CACX,CAGO,gBAAS,8BAA8BD,EAC9C,CACI,QAAS,EAAI,EAAG,EAAIA,EAAK,WAAW,OAAQ,IAAK,CAC7C,IAAIgB,EAAQhB,EAAK,WAAW,CAAC,EACzBgB,EAAM,WAAa,KAAK,WAAaA,EAAM,UAAU,KAAK,EAAE,QAAU,GACtEhB,EAAK,YAAYgB,CAAK,EACtB,MACOA,EAAM,WAAa,KAAK,cAAgBA,EAAM,WAAa,KAAK,yBACvE,8BAA8BA,CAAK,CAE3C,CACIhB,EAAK,YACL,8BAA8BA,EAAK,UAAU,CAErD",
  "names": ["$", "node", "ids", "attachShadowFromTemplate", "template", "parent", "shadowRoot", "id", "walkShadowDom", "root", "e", "walkLightDom", "p", "cloneAppend", "n", "classname", "x", "child"]
}
